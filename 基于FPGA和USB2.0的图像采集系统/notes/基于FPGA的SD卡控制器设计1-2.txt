FPGA为平台， 设计了采用 SPI接口的 SD卡控制器。并采用数据缓存 （First In First Out， FIFO） 技术解决实际应用中的时序问题， 最终实现了整体设计功能。

基于 FPGA 的 SD卡控制器的设计方法：通过分析SD卡物理规范协议， 设计SD卡控制器的结构并进行具体模块的划分。系统实现 SD卡的初始化、 读写数据等功能。

SD 卡控制器的设计分为 7 个功能子控制器：
SPI接口控制器（SPI）、 时钟控制器（CLK）、 初始化控制器（SD_INITIAL）、 写数据缓存器（WRITEFIFO）、 读数据缓存器（READFIFO）、 写数据控制器（SD_WRITE）、读数据控制器 （SD_READ）。

PARTI；系统硬件设计：


以 FPGA为平台， 采用 Verilog HDL硬件描述语言来实现整个系统的设计。
以 SPI总线接口进行数据的通信， 采用（First In First Out， FIFO）技术来实现数据的时钟同步， 最终完成 SD卡初始化以及读写操作等功能


SPI接口控制器：
SD卡共支持 3种传输模式： 1位 SD总线模式、 4位SD总线模式（速率高）以及 SPI总线模式（协议简单）。

SPI 总线是 同步串行外设接口总线协议， 允许 CPU 与各种外围接口器件（包括 AD转换、 DA转换等） 以串行方式进行通信。
SPI接口使用4条线： 串行时钟线 （SCK）、 主机输入/从机输出线（MISO）、 主机输出/从机输入线（MOSI）、使能信号线（CS）。

SPI 是一个环形总线结构。
在 CS信号有效时， SCK 的下降沿发送数据， 上升沿去读取数据。
在 CS 使能信号有效时， 主机输入的并行数据存储到移位寄存器中，并转换成串行数据存储到 SD卡。
在 CS 使能信号有效时， 读取 SD卡的串行数据， 经移位寄存器转换成并行数据。

时钟控制器：

SD 卡数据传输时钟是0～50 MHz， 数据传输速率是0～25 MB/s， SD卡初始化的时钟是0～400 kHz。

系统时钟是50 MHz， 因此为了保证 SD卡数据传输的速率和初始化的顺利完成， 需要对系统时钟进行分频：
1、使得初始化时钟不得超过 400 kHz
2、数据传输时钟不超过 50 MHz

通过时钟控制器将系统时钟产生两个时钟， 即初始化时钟和数据传输时钟：
1、初始化时钟控制初始化控制器
2、数据传输时钟控制读写数据控制器以及读写数据缓存器等。


初始化控制器：

对 SD卡进行读写操作之前， 要对其进行初始化。

1、在上电之后， 主控制器开始在命令线上传送时钟和初始化序列。这个序列是相邻的一系列逻辑为 “1”的信号流 （也就是高电平的信号）。

这个序列的长度最大为 1 ms。这 1 ms中， 首先要为了该卡的通信准备延时 64个时钟， 之后再用 10个时钟来消除上电同步中可能出现的问题。
也就是说在上电过程中至少要延时74个时钟， 但是延时的时间不能超过1 ms。

2、74个时钟延时结束之后， 主控器开始在 CS信号有效 （低电平） 时向 SD卡发送一个复位命令 （CMD0） 来进入 SPI总线模式， 在接收到 SD卡的应答 0x01h之后成功复位 SD卡；

3、接着发送一个初始化命令 （CMD1）， 主控器在收到 SD卡的应答 0x00h之后将 CS信号拉高， 最终初始化完成。


读/写数据控制器

读/写数据控制器有 2个部分构成， 分别是命令控制器和数据控制器。

1、在初始化结束之后， 命令控制器开始在 CS信号有效（低电平）时向 SD卡发送一个写单模块命令或者一个读单模块命令， 等待 SD卡的命令响应， 当 SD卡命令响应为0x00h时， 状态跳到数据控制器。

2、写数据控制器开始在收到 SD卡正确的写命令响应之后发送一个数据的起始令牌 （0xFE）， 开始向 SD卡写入相应的数据， 这里的数据长度默认 512 byte， 写完512 byte数据之后， 将会收到 SD卡的数据响应进入 SD卡的忙状态来完成数据的写入。


1、读数据控制器开始在收到 SD卡正确的读命令响应之后会再次收到 SD卡的一个数据起始令牌 （0xFE）

2、开始读 SD卡相应扇区的数据， 这里数据长度也是默认的 512 byte， 在读取 512 byte 之后完成了 SD 卡的读数据操作。


读/写数据缓存器

在 SD卡控制器的实际应用中， 当用 SD卡来存储通过音视频芯片采集到的数据时， 由于采集数据的速率与 SD卡读写数据的速率不同， 可能导致数据的不连续或者是数据的缺失。增加读/写数据缓存器可以有效地解决这个问题。

缓存器的容量可以根据采集到的数据的速率来选择， 因此本次设计中读/写数据缓存器采用 28个 16位宽的FIFO。


PARTII：系统软件设计

系统软件设计使用自顶向下的设计思想。SD卡启动时处在 SD总线模式下。初始化模块将 SD总线模式转换成 SPI总线模式。初始化成功之后将发送读写命令进入读写操作。

系统设计流程详见照片。注意的是如何有效地解决了存储数据与采集数据速率不同的问题。





